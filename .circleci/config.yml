version: 2.1

executors:
  amd64: # Docker using the Base Convenience Image
    docker:
      - image: cimg/base:current
    environment:
      PLATFORM: "linux/amd64"
      EXECUTOR: "amd64"
  arm64: # a Linux VM running Ubuntu 20.04
    docker:
      - image: cimg/base:current
    resource_class: arm.medium
    environment:
      PLATFORM: "linux/arm64"
      EXECUTOR: "arm64"

commands:
  skip_unchanged:
    parameters:
      except_branches:
        default: main,HEAD
        description: Comma-separated list of git branches where we should never skip tests.
        type: string
      git_base_branch:
        default: origin/main
        description: The branch to compare against when looking for changing.
        type: string
      paths:
        default: ''
        description: The paths to look for changes in.
        type: string
      target:
        default: ''
        description: The target to look for changes in.
        type: string
    steps:
      - run:
          command: |
            echo "Skip debugging"
            echo "--------------"
            echo "GIT_BASE_BRANCH=$GIT_BASE_BRANCH"
            echo "EXCEPT_BRANCHES=$EXCEPT_BRANCHES"
            echo "TARGET=$TARGET"
          
            BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
            echo "BRANCH_NAME=$BRANCH_NAME"
            
            if [[ -n $TARGET ]]; then
              PATHS=$(jq -r ".${TARGET}" .circleci/target-paths.json)
            fi
            echo "PATHS=$PATHS"
          
            IFS=' ' read -ra paths_arr \<<< "$PATHS"
            echo "paths_arr=" "${paths_arr[@]}"
          
            CHANGED_FILES="$(git diff "$GIT_BASE_BRANCH"..."$(git symbolic-ref --short -q HEAD)" --name-only --diff-filter=ACMRT "${paths_arr[@]}")";
            echo "CHANGED_FILES=$CHANGED_FILES"
          
            if [[ -n "$CIRCLE_TAG" ]] || [[ "$EXCEPT_BRANCHES" == *"${BRANCH_NAME}"* ]] || [ -n "${CHANGED_FILES}" ];
            then
                exit 0;
            fi
            circleci step halt;
          environment:
            EXCEPT_BRANCHES: << parameters.except_branches >>
            GIT_BASE_BRANCH: << parameters.git_base_branch >>
            PATHS: << parameters.paths >>
            TARGET: << parameters.target >>
          name: Skip if no changes
  configure-ghcr:
    description: Configure GHCR access
    steps:
      - run:
          name: Configure GHCR
          command: |
            [ -z "$GHCR_TOKEN" ] && exit 0
            [ -z "$GHCR_USER" ] && exit 0
            echo $GHCR_TOKEN | docker login ghcr.io -u $GHCR_USER --password-stdin
  install-java-21:
    description: Install Java 21
    steps:
      - run:
          name: Install Java 21
          command: |
            sudo apt-get update
            sudo apt install -y openjdk-21-jdk
            sudo update-java-alternatives --set $(update-java-alternatives --list | grep java-1.21 | awk '{ print $3 }')
jobs:
    server-tests:
      parallelism: 2
      machine:
        image: ubuntu-2204:2024.01.2
      working_directory: ~/project
      steps:
        - checkout
        - skip_unchanged:
            paths: server
        - configure-ghcr
        - install-java-21
        - run:
            name: Split Server Tests
            command: |
              cd server/src/test/java
              
              # Get list of classnames of tests that should run on this node.
              circleci tests glob "**/*.java" | cut -c 1- | sed 's@/@.@g' | sed 's/.\{5\}$//' | circleci tests run --command=">classnames.txt xargs echo" --verbose --split-by=timings --timings-type=classname
  
              #if this is a re-run and it is a parallel run that does not have tests to run, halt execution of this parallel run
              [ -s classnames.txt ] || circleci-agent step halt
        - run:
            name: Run Server Tests
            command: |
              GRADLE_ARGS=$(cat server/src/test/java/classnames.txt | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
              echo "Prepared arguments for Gradle: $GRADLE_ARGS"
              
              ./gradlew test $GRADLE_ARGS

    build:
      parameters:
        platform:
          type: executor
        target:
          type: string
      executor: << parameters.platform >>
      steps:
        - checkout
        - skip_unchanged:
            target: << parameters.target >>
        - configure-ghcr
        - setup_remote_docker
        - run:
            name: Build
            command: |              
              docker buildx bake --set _platforms.platform=${PLATFORM} << parameters.target >>
    push:
      parameters:
        platform:
          type: executor
        target:
          type: string
      executor: << parameters.platform >>
      steps:
        - checkout
        - configure-ghcr
        - setup_remote_docker
        - run: mkdir -p /tmp/workspace
        - run:
            name: Push
            command: |
              export TAG=${CIRCLE_TAG:-latest}-${EXECUTOR} 
              docker buildx bake --set _platforms.platform=${PLATFORM} << parameters.target >> --push
              export IMAGE=$(docker images | awk '{print $1}' | awk 'NR==2')
              FILE=/tmp/workspace/<< parameters.target >>_${EXECUTOR}
              
              # write the target image
              echo $IMAGE:${CIRCLE_TAG:-latest} > ${FILE}
              
              # write the source image
              echo $IMAGE:${TAG} >> ${FILE}
              

        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - .
    link:
      docker:
        - image: docker
      steps:
        - checkout
        - configure-ghcr
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Link
            command: |
              dir=/tmp/workspace
              for amd64_file in "$dir"/*_amd64; do
                # Extract the filename from the full path
                amd64_filename=$(basename "$amd64_file")
                
                # Extract the prefix from the filename
                prefix=$(basename "$amd64_filename" _amd64)
                
                # Check if corresponding arm64 file exists
                arm64_file="${amd64_file%_amd64}_arm64"
                if [[ -f "$arm64_file" ]]; then
                  # Extract the filename from the full path
                  arm64_filename=$(basename "$arm64_file")
              
                  # cat the amd file and save the first line as the image name
                  image_name=$(cat "$amd64_file" | head -n 1)
              
                  # cat the amd file and save the second line as one of the aliases
                  amd_image=$(cat "$amd64_file" | tail -n 1)
              
                  # cat the arm file and save the second line as one of the aliases
                  arm_image=$(cat "$arm64_file" | tail -n 1)
              
                  # Run the tag command
                  echo "Linking $image_name with $amd_image and $arm_image"
                  docker buildx imagetools create -t "$image_name" "$amd_image" "$arm_image"
                fi
              done
workflows:
  build-all:
    jobs:
      - server-tests:
          context: ghcr-token
      - build:
          context: ghcr-token
          matrix:
            parameters:
              platform: [amd64, arm64]
              target: [proxy, server]
          requires:
            - server-tests
      - push:
          context: ghcr-token
          requires:
            - build
          matrix:
            parameters:
              platform: [amd64, arm64]
              target: [proxy, server]
          filters:
            branches:
              only: main
            tags:
              only: /.*/
      - link:
          context: ghcr-token
          requires:
            - push
          filters:
            branches:
              only: main
            tags:
              only: /.*/




