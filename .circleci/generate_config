#!/usr/bin/env node
(() => {
    const TARGETS = require('./target_definitions.json');
    const { execSync } = require('child_process');
    const fs = require('fs');

    function getChangedFiles() {
        const command = process.env.CI ? 'git diff --name-status main | awk \'{print $2}\'' : 'git status --porcelain | awk \'{print $2}\'';
        const diff = execSync(command, {encoding: 'utf8'});
        return diff.split('\n').filter(Boolean);
    }

    function matchesGlob(str, glob) {
        const regex = new RegExp('^' + glob.split('*').join('.*') + '$');
        return regex.test(str);
    }

    const buildTargets = [];
    if (process.env.CIRCLE_BRANCH === 'main' || process.env.CIRCLE_TAG) {
        buildTargets.push(TARGETS.map(target => target.target));
    } else {
        const changedFiles = getChangedFiles();
        for (const target of TARGETS) {
            for (const glob of target.paths) {
                for (const changedFile of changedFiles) {
                    if (matchesGlob(changedFile, glob)) {
                        buildTargets.push(target.target);
                        break;
                    }
                }
            }
        }
    }

    if (buildTargets.length === 0) {
        buildTargets.push('null');
    }

    // replace %%TARGETS%% in the build_config_template.yml with the buildTargets using fs
    const buildConfig = fs.readFileSync('build_config_template.yml', 'utf8');
    const newBuildConfig = buildConfig.replaceAll('%%TARGETS%%', buildTargets.join(', '));
    fs.writeFileSync('build_config.yml', newBuildConfig);
})();